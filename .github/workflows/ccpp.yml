name: Automatic build

on: [push]

jobs:
  Linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install libxss1 libgstreamer-plugins-base1.0-0 libgstreamer1.0-0 qt5-default libqt5gui5 libqt5webengine5 libqt5webenginecore5 libqt5webenginewidgets5 libqt5printsupport5 libqt5quickwidgets5 qml-module-qtquick-controls libqt5x11extras5 binutils cmake pkg-config qtbase5-dev qtwebengine5-dev libqt5x11extras5-dev  qtbase5-private-dev libssl-dev libxss-dev libxmu-dev
    - name: Configure
      run: qmake .
    - name: Build
      run: make -j2

  Flatpak:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install flatpak flatpak-builder
    - name: Install Flatpak KDE SDK
      run: |
        sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install --system -y flathub org.kde.Platform//5.14
        sudo flatpak install --system -y flathub org.kde.Sdk//5.14
    - name: Build the Flatpak package
      run: |
        pushd dist/flatpak
        sudo flatpak-builder --repo=flatpak-repo --force-clean flatpak-build org.fedoraproject.MediaWriter.json
        flatpak build-bundle flatpak-repo org.fedoraproject.MediaWriter.flatpak org.fedoraproject.MediaWriter
        mv org.fedoraproject.MediaWriter.flatpak ..
        popd

  macOS:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install dependencies
      run: |
        brew install qt
        echo 'export PATH="/usr/local/opt/qt/bin:$PATH"' >> ~/.bash_profile
        brew install xz
        brew install git
        npm install -g create-dmg
    - name: Configure
      run: |
        TAG_NAME=$(bash ./dist/get-tag-name.sh)
        bash dist/mac/build.sh configure
    - name: Build
      run: |
        TAG_NAME=$(bash ./dist/get-tag-name.sh)
        bash dist/mac/build.sh build
    - name: Insert dependencies
      run: |
        TAG_NAME=$(bash ./dist/get-tag-name.sh)
        bash dist/mac/build.sh deps
    - name: Sign (TBD)
      run: |
        TAG_NAME=$(bash ./dist/get-tag-name.sh)
        true # bash  dist/mac/build.sh sign
    - name: Package
      run: |
        TAG_NAME=$(bash ./dist/get-tag-name.sh)
        cd build/app
        ls
        create-dmg "Fedora Media Writer.app"
    - name: Notarize (TBD)
      run: |
        TAG_NAME=$(bash ./dist/get-tag-name.sh)
        true # bash dist/mac/build.sh notarize

  Windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: d:/a/MediaWriter/Qt
        key: QtCache
    - name: Install dependencies
      shell: bash
      run: |
        choco install nsis
        choco install dos2unix
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        arch: win64_mingw73
    - name: Build xz-utils
      shell: bash
      if: ${{ !steps.cache-qt.outputs.cache-hit }}
      run: |
        git clone https://git.tukaani.org/xz.git
        sed -i 's/#include "config.h"//' xz/src/common/common_w32res.rc
        sed -i 's/PACKAGE_NAME/"liblzma"/' xz/src/common/common_w32res.rc
        sed -i 's/PACKAGE_URL/"https:\/\/tukaani.org\/xz\/"/' xz/src/common/common_w32res.rc
        mkdir xz/build
        cd xz/build
        cmake -DCMAKE_SH="CMAKE_SH-NOTFOUND" -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX="$Qt5_Dir" -DBUILD_SHARED_LIBS=ON ..
        mingw32-make -j2 VERBOSE=1
        mingw32-make install
        # ugh
        cp "$Qt5_Dir/bin/liblzma.dll" "$Qt5_Dir/bin/libliblzma.dll"
    - name: Build MediaWriter
      shell: bash
      run: |
        #export PATH=$(echo "$PATH" | sed -e 's/:\/c\/ProgramData\/Chocolatey\/bin//' | sed -e 's/:\/c\/Strawberry\/c\/bin//')
        #export PATH="$Qt5_Dir/../../Tools/mingw730_32/bin:$PATH"
        mkdir build
        cd build
        "$Qt5_Dir/bin/qmake"  ..
        mingw32-make -j2 VERBOSE=1
    - name: Windeployqt
      shell: bash
      run: |
        cd build/app/release
        mv ../helper.exe .
        $Qt5_Dir/bin/windeployqt -qmldir ../../.. mediawriter.exe
        cp $Qt5_Dir/bin/libstdc*.dll .
        cp $Qt5_Dir/bin/libwinpthread*.dll .
        cp $Qt5_Dir/bin/libgcc*.dll .
    - name: Installer
      shell: bash
      run: |
        TAG_NAME=$(bash ./dist/get-tag-name.sh)

        VERSION_STRIPPED=$(sed "s/-.*//" <<< "${TAG_NAME}")
        if [[ "$VERSION_STRIPPED" == "" ]]; then
            VERSION_STRIPPED=0.0.0
        fi
        VERSION_MAJOR=$(cut -d. -f1 <<< "${VERSION_STRIPPED}")
        VERSION_MINOR=$(cut -d. -f2 <<< "${VERSION_STRIPPED}")
        VERSION_BUILD=$(cut -d. -f3 <<< "${VERSION_STRIPPED}")
        INSTALLED_SIZE=$(du -k -d0 "build/app/release" | cut -f1)

        cp "dist/win/mediawriter_native.nsi" "dist/win/mediawriter_native.tmp.nsi"

        sed -i "s/#!define VERSIONMAJOR/!define VERSIONMAJOR ${VERSION_MAJOR}/" "dist/win/mediawriter_native.tmp.nsi"
        sed -i "s/#!define VERSIONMINOR/!define VERSIONMINOR ${VERSION_MINOR}/" "dist/win/mediawriter_native.tmp.nsi"
        sed -i "s/#!define VERSIONBUILD/!define VERSIONBUILD ${VERSION_BUILD}/" "dist/win/mediawriter_native.tmp.nsi"
        sed -i "s/#!define INSTALLSIZE/!define INSTALLSIZE ${INSTALLED_SIZE}/" "dist/win/mediawriter_native.tmp.nsi"

        unix2dos < "LICENSE" > "build/app/release/LICENSE.txt"
        makensis -DCERTPATH="" -DCERTPASS="" dist/win/mediawriter_native.tmp.nsi
        mv dist/win/FMW-setup.exe ./"FedoraMediaWriter-win64-$TAG_NAME.exe"
