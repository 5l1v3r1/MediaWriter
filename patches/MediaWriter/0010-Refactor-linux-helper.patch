From 8c18875c02360549c9231fb1c58bfdccabcfd818 Mon Sep 17 00:00:00 2001
From: squimrel <squimrel@users.noreply.github.com>
Date: Wed, 28 Jun 2017 02:38:14 +0000
Subject: [PATCH 10/40] Refactor linux helper

---
 helper/linux/drive.cpp | 60 ++++++++++++++++++++++++--------------------------
 helper/linux/drive.h   | 12 +++++-----
 2 files changed, 34 insertions(+), 38 deletions(-)

diff --git a/helper/linux/drive.cpp b/helper/linux/drive.cpp
index 5718b40..94bfaa5 100644
--- a/helper/linux/drive.cpp
+++ b/helper/linux/drive.cpp
@@ -41,23 +41,22 @@ Q_DECLARE_METATYPE(InterfacesAndProperties)
 Q_DECLARE_METATYPE(DBusIntrospection)
 
 Drive::Drive(const QString &identifier)
-    : err(stderr), fileDescriptor(QDBusUnixFileDescriptor(-1)), identifier(identifier),
-      device(std::move(std::unique_ptr<QDBusInterface>(new QDBusInterface("org.freedesktop.UDisks2", identifier, "org.freedesktop.UDisks2.Block", QDBusConnection::systemBus())))),
-      path(qvariant_cast<QDBusObjectPath>(device->property("Drive")).path()),
-      drive(std::move(std::unique_ptr<QDBusInterface>(new QDBusInterface("org.freedesktop.UDisks2", path, "org.freedesktop.UDisks2.Drive", QDBusConnection::systemBus())))) {
+    : m_fileDescriptor(QDBusUnixFileDescriptor(-1)), m_identifier(identifier),
+      m_device(new QDBusInterface("org.freedesktop.UDisks2", m_identifier, "org.freedesktop.UDisks2.Block", QDBusConnection::systemBus())),
+      m_path(qvariant_cast<QDBusObjectPath>(m_device->property("Drive")).path()) {
 }
 
 /**
  * Open drive for writing.
  */
 void Drive::open() {
-    if (getDescriptor() == -1) {
-        QDBusReply<QDBusUnixFileDescriptor> reply = device->callWithArgumentList(QDBus::Block, "OpenForBenchmark", { Properties{ { "writable", true } } });
-        fileDescriptor = reply.value();
-        if (!fileDescriptor.isValid()) {
-            throw std::runtime_error(reply.error().message().toStdString());
-            fileDescriptor = QDBusUnixFileDescriptor(-1);
-        }
+    if (getDescriptor() != -1)
+        return;
+    QDBusReply<QDBusUnixFileDescriptor> reply = m_device->callWithArgumentList(QDBus::Block, "OpenForBenchmark", { Properties{ { "writable", true } } });
+    m_fileDescriptor = reply.value();
+    if (!m_fileDescriptor.isValid()) {
+        throw std::runtime_error(reply.error().message().toStdString());
+        m_fileDescriptor = QDBusUnixFileDescriptor(-1);
     }
 }
 
@@ -65,7 +64,7 @@ void Drive::open() {
  * Close drive for writing.
  */
 void Drive::close() {
-    fileDescriptor = QDBusUnixFileDescriptor(-1);
+    m_fileDescriptor = QDBusUnixFileDescriptor(-1);
 }
 
 /**
@@ -81,8 +80,8 @@ void Drive::write(const void *buffer, std::size_t size) {
 /**
  * Grab file descriptor.
  */
-int Drive::getDescriptor() {
-    return fileDescriptor.fileDescriptor();
+int Drive::getDescriptor() const {
+    return m_fileDescriptor.fileDescriptor();
 }
 
 /**
@@ -90,7 +89,7 @@ int Drive::getDescriptor() {
  * existing information about partitions.
  */
 void Drive::wipe() {
-    QDBusReply<void> formatReply = device->call("Format", "dos", Properties());
+    QDBusReply<void> formatReply = m_device->call("Format", "dos", Properties());
     if (!formatReply.isValid() && formatReply.error().type() != QDBusError::NoReply) {
         throw std::runtime_error(formatReply.error().message().toStdString());
     }
@@ -101,9 +100,9 @@ void Drive::wipe() {
  * filesystem.
  */
 QPair<QString, qint64> Drive::addPartition(quint64 offset, const QString &label) {
-    QDBusInterface partitionTable("org.freedesktop.UDisks2", identifier, "org.freedesktop.UDisks2.PartitionTable", QDBusConnection::systemBus());
-    const quint64 proposedSize = device->property("Size").toULongLong() - offset;
-    QDBusReply<QDBusObjectPath> partitionReply = partitionTable.call("CreatePartition", offset, proposedSize, "", "", Properties());
+    QDBusInterface partitionTable("org.freedesktop.UDisks2", m_identifier, "org.freedesktop.UDisks2.PartitionTable", QDBusConnection::systemBus());
+    const quint64 proposedSize = m_device->property("Size").toULongLong() - offset;
+    QDBusReply<QDBusObjectPath> partitionReply = partitionTable.call("CreatePartition", offset, proposedSize, "0xb", "", Properties{ { "partition-type", "primary" } });
     if (!partitionReply.isValid()) {
         throw std::runtime_error(partitionReply.error().message().toStdString());
     }
@@ -135,19 +134,18 @@ QString Drive::mount(const QString &partitionIdentifier) {
 void Drive::umount() {
     QDBusInterface manager("org.freedesktop.UDisks2", "/org/freedesktop/UDisks2", "org.freedesktop.DBus.ObjectManager", QDBusConnection::systemBus());
     QDBusMessage message = manager.call("GetManagedObjects");
-
-    if (message.arguments().length() == 1) {
-        QDBusArgument arg = qvariant_cast<QDBusArgument>(message.arguments().first());
-        DBusIntrospection objects;
-        arg >> objects;
-        for (auto i : objects.keys()) {
-            if (objects[i].contains("org.freedesktop.UDisks2.Filesystem")) {
-                QString currentDrivePath = qvariant_cast<QDBusObjectPath>(objects[i]["org.freedesktop.UDisks2.Block"]["Drive"]).path();
-                if (currentDrivePath == path) {
-                    QDBusInterface partition("org.freedesktop.UDisks2", i.path(), "org.freedesktop.UDisks2.Filesystem", QDBusConnection::systemBus());
-                    message = partition.call("Unmount", Properties{ { "force", true } });
-                }
-            }
+    if (message.arguments().length() != 1)
+        return;
+    QDBusArgument arg = qvariant_cast<QDBusArgument>(message.arguments().first());
+    DBusIntrospection objects;
+    arg >> objects;
+    for (auto i : objects.keys()) {
+        if (!objects[i].contains("org.freedesktop.UDisks2.Filesystem"))
+            continue;
+        QString currentDrivePath = qvariant_cast<QDBusObjectPath>(objects[i]["org.freedesktop.UDisks2.Block"]["Drive"]).path();
+        if (currentDrivePath == m_path) {
+            QDBusInterface partition("org.freedesktop.UDisks2", i.path(), "org.freedesktop.UDisks2.Filesystem", QDBusConnection::systemBus());
+            message = partition.call("Unmount", Properties{ { "force", true } });
         }
     }
 }
diff --git a/helper/linux/drive.h b/helper/linux/drive.h
index f0d3247..2e397ae 100644
--- a/helper/linux/drive.h
+++ b/helper/linux/drive.h
@@ -38,19 +38,17 @@ public:
     void open();
     void close();
     void write(const void *buffer, std::size_t size);
-    int getDescriptor();
+    int getDescriptor() const;
     void wipe();
     QPair<QString, qint64> addPartition(quint64 offset = 0ULL, const QString &label = "");
     QString mount(const QString &partitionIdentifier);
     void umount();
 
 private:
-    QTextStream err;
-    QDBusUnixFileDescriptor fileDescriptor;
-    QString identifier;
-    std::unique_ptr<QDBusInterface> device;
-    QString path;
-    std::unique_ptr<QDBusInterface> drive;
+    QDBusUnixFileDescriptor m_fileDescriptor;
+    QString m_identifier;
+    std::unique_ptr<QDBusInterface> m_device;
+    QString m_path;
 };
 
 #endif // DRIVE_H
-- 
2.14.1

